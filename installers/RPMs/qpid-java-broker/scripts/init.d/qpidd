#!/bin/bash
#
# qpidd  This shell script takes care of starting and stopping
#                the AWIPS qpid instance.
#
# chkconfig: - 99 10
# description: Qpid messaging broker used by the AWIPS 2 instance
# processname: qpid-server
# config: /awips2/qpid/etc/config.json


# Source function library.
. /etc/rc.d/init.d/functions

# Source networking configuration.
. /etc/sysconfig/network

# Check that networking is up.
[ ${NETWORKING} = "no" ] && exit 0

RETVAL=0
prog="qpid-wrapper"

# Who to run QPID as, usually "awips".  (NOT "root")
QPIDUSER=awips

# Todays date in format of YYYYMMDD.
TODAY=`/bin/date +%Y%m%d`

QPID_HOME=/awips2/qpid
YAJSW_HOME=/awips2/yajsw
wrapper_process="org.rzo.yajsw.app.WrapperJVMMain"
_wrapper_jar=${YAJSW_HOME}/wrapper.jar

function getQPID_psCount()
{
   psCount_qpid=`ps -ef | grep ${wrapper_process} | grep QPID_HOME="${QPID_HOME}" | grep -c "PNAME=QPBRKR "`
}

function getQPID_pid()
{
   pid_qpid=`ps -e -o pid,args | grep ${wrapper_process} | grep QPID_HOME="${QPID_HOME}" | grep "PNAME=QPBRKR " | grep -e "^ *\([0-9]\+\)" -o`
}

function getWrapper_psCount()
{
   psCount_wrapper=`ps -ef | grep "${_wrapper_jar} -c" | grep -c wrapper.conf`
}

function getWrapper_pid()
{
   pid_wrapper=`ps -e -o pid,args | grep "${_wrapper_jar} -c" | grep wrapper.conf | grep -e "^ *\([0-9]\+\)" -o`
}

start() {
   getQPID_psCount
   if [ ${psCount_qpid} -eq 1 ]; then
      echo "WARNING: QPID already running, not starting another instance"
      return 1
   fi

   DAEMON="/bin/bash ${QPID_HOME}/bin/${prog}"
   
   QPIDSTARTLOG=${QPID_HOME}/log/start-qpid-$TODAY.log
   su - $QPIDUSER -c "$DAEMON" >> $QPIDSTARTLOG 2>&1 &
   sleep 5
   checkStatus
}

stop() {
   # determine if qpid is running, first.
   getQPID_psCount
   if [ ${psCount_qpid} -ne 1 ]; then
      echo "WARNING: Qpid is not running, no shutdown attempted!"
      return 1
   fi
   # get the qpid pid
   getQPID_pid
   
   # determine if the qpid wrapper is running.
   getWrapper_psCount
   if [ ${psCount_wrapper} -eq 1 ]; then
      # get the wrapper pid
      getWrapper_pid
      
      # stop the wrapper
      kill ${pid_wrapper}
      kill ${pid_qpid}
   else
      # stop qpid
      kill ${pid_qpid}
   fi
   pkill -f qpid-wrapper
   pkill -f "qpid/etc/wrapper.conf"
   
   # wait for and verify that qpid has stopped running
   savepid=${pid_qpid}
   while [ "X${pid_qpid}" != "X" ]; do
      sleep 1
      
      getQPID_psCount
      if [ ${psCount_qpid} -eq 1 ]; then
         pid_qpid=${savepid}
      else
         pid_qpid=""
      fi
   done
}

checkStatus() {
   getQPID_psCount
   if [ ${psCount_qpid} -eq 1 ]; then
      getQPID_pid
      echo "QPID is running (PID ${pid_qpid})"
   else
      echo "QPID is not running"
   fi
}

# Verify root user
checkUser() {
   REQUIREDUSER="root"
   CURUSER=`whoami`
   if [ "$CURUSER" != "$REQUIREDUSER" ]; then
      echo "Insufficient privileges: must run script as $REQUIREDUSER"
      exit 1
   fi
}

# See how we were called.
case $1 in
   start)
      checkUser
      echo "Starting QPID"
      start
      RETVAL=$?
      ;;
   stop)
      checkUser
      echo "Stopping QPID"
      stop
      RETVAL=$?
      ;;
   restart)
      checkUser
      echo "Stopping QPID"
      stop
      echo "Starting QPID"
      start
      RETVAL=$?
      ;;
   status)
      checkStatus
      RETVAL=$?
      ;;
   *)
      # Print help
      echo "Usage: $0 {start|stop|restart|reload|status}" 1>&2
      exit 1
      ;;
esac

exit $RETVAL
