#!/bin/bash
#
# httpd        Startup script for the Apache HTTP Server used by Pypies
#
# chkconfig: - 85 15
# description: Apache is a World Wide Web server.  It is used to serve \
#	       HTML files and CGI.  Pypies uses it to serve connections.
# processname: httpd
# config: /etc/httpd/conf/httpd.conf
# config: /etc/sysconfig/httpd
# pidfile: /var/run/httpd.pid

# Source function library.
. /etc/rc.d/init.d/functions

if [ -f /etc/sysconfig/httpd ]; then
        . /etc/sysconfig/httpd
fi

# Start httpd in the C locale by default.
HTTPD_LANG=${HTTPD_LANG-"C"}

# This will prevent initlog from swallowing up a pass-phrase prompt if
# mod_ssl needs a pass-phrase from the user.
INITLOG_ARGS=""

# Set HTTPD=/usr/sbin/httpd.worker in /etc/sysconfig/httpd to use a server
# with the thread-based "worker" MPM; BE WARNED that some modules may not
# work correctly with a thread-based MPM; notably PHP will refuse to start.

# Find the httpd-pypies installation.
HTTPD_PYPIES_INSTALL="/awips2/httpd_pypies"

# Path to the apachectl script, server binary, and short-form for messages.
apachectl=${HTTPD_PYPIES_INSTALL}/usr/sbin/apachectl
httpd=${HTTPD-${HTTPD_PYPIES_INSTALL}/usr/sbin/httpd}
prog=httpd
pidfile=${PIDFILE-${HTTPD_PYPIES_INSTALL}/var/run/httpd.pid}
lockfile=${LOCKFILE-${HTTPD_PYPIES_INSTALL}/var/lock/subsys/httpd}
RETVAL=0
PYTHON_INSTALL="/awips2/python"
loggingCmd="${PYTHON_INSTALL}/bin/python -u ${PYTHON_INSTALL}/lib/python2.7/site-packages/pypies/logging/logProcess.py"

# pypies configuration location
export PYPIES_CFG=/awips2/pypies/conf/pypies.cfg

# Add to LD_LIBRARY_PATH, if necessary.
PYTHON_LIB_DIR="${PYTHON_INSTALL}/lib"

# Determine if LD_LIBRARY_PATH needs to be updated.
echo $LD_LIBRARY_PATH | grep "${PYTHON_LIB_DIR}" > /dev/null 2>&1
RC="$?"
if [ ! "${RC}" = "0" ]; then
   export LD_LIBRARY_PATH=${PYTHON_LIB_DIR}:$LD_LIBRARY_PATH
fi

# check for 1.3 configuration
check13 () {
	CONFFILE=${HTTPD_PYPIES_INSTALL}/etc/httpd/conf/httpd.conf
	GONE="(ServerType|BindAddress|Port|AddModule|ClearModuleList|"
	GONE="${GONE}AgentLog|RefererLog|RefererIgnore|FancyIndexing|"
	GONE="${GONE}AccessConfig|ResourceConfig)"
	if LANG=C grep -Eiq "^[[:space:]]*($GONE)" $CONFFILE; then
		echo
		echo 1>&2 " Apache 1.3 configuration directives found"
		echo 1>&2 " please read /usr/share/doc/awips2-httpd-pypies-2.2.3/migration.html"
		failure "Apache 1.3 config directives test"
		echo
		exit 1
	fi
}

# The semantics of these two functions differ from the way apachectl does
# things -- attempting to start while running is a failure, and shutdown
# when not running is also a failure.  So we just do it the way init scripts
# are expected to behave here.
start() {		
        source /etc/profile.d/awips2HDF5Tools.sh
        echo -n $"Starting logging service:"
        nohup su awips -c "$loggingCmd > /tmp/pypiesLoggingService.log 2>&1" > /dev/null &
        RC=$?
        # TODO: need better checks to ensure that the logging service actually keeps
        #       running after startup.
        RC=$?
        if [ ${RC} -ne 0 ]; then
           failure
        else
           success
        fi        
        echo
        echo -n $"Starting $prog: "
        check13 || exit 1
        LANG=$HTTPD_LANG daemon $httpd $OPTIONS -f \
           ${HTTPD_PYPIES_INSTALL}/etc/httpd/conf/httpd.conf
        RETVAL=$?
        echo
        [ $RETVAL = 0 ] && touch ${lockfile}
        return $RETVAL
}

stop() {
	echo -n $"Stopping $prog: "
        ${HTTPD_PYPIES_INSTALL}/usr/sbin/apachectl -f \
           ${HTTPD_PYPIES_INSTALL}/etc/httpd/conf/httpd.conf \
           -k graceful-stop
	RETVAL=$?
	echo
	[ $RETVAL = 0 ] && rm -f ${lockfile} ${pidfile}
    echo -n $"Stopping logging service:"
    # Stop the logging process
    for pid in `ps aux | grep [l]ogProcess.py | awk '{print $2}'`;
    do
       kill -9 ${pid}
       RC=$?
       if [ ${RC} -ne 0 ]; then
          failure
          return
       fi
    done
    success
    echo
}
# When stopping httpd a delay of >10 second is required before SIGKILLing the
# httpd parent; this gives enough time for the httpd parent to SIGKILL any
# errant children.
forcestop() {
	echo -n $"Stopping $prog: "
	killproc -d 10 $httpd
	RETVAL=$?
	echo
	[ $RETVAL = 0 ] && rm -f ${lockfile} ${pidfile}
    echo -n $"Stopping logging service:"
    # Stop the logging process
    for pid in `ps aux | grep [l]ogProcess.py | awk '{print $2}'`;
    do
       kill -9 ${pid}
       RC=$?
       if [ ${RC} -ne 0 ]; then
          failure
          return
       fi
    done
    success
    echo
}
reload() {
    echo -n $"Reloading $prog: "
    if ! LANG=$HTTPD_LANG $httpd $OPTIONS -t >&/dev/null; then
        RETVAL=$?
        echo $"not reloading due to configuration syntax error"
        failure $"not reloading $httpd due to configuration syntax error"
    else
        ${HTTPD_PYPIES_INSTALL}/usr/sbin/apachectl -f \
           ${HTTPD_PYPIES_INSTALL}/etc/httpd/conf/httpd.conf \
           -k graceful
        RETVAL=$?
    fi
    echo
}

# See how we were called.
case "$1" in
  start)
	start
	;;
  stop)
	stop
	;;
  forcestop)
  	forcestop
  	;;
  status)
        status $httpd
	RETVAL=$?
	;;
  restart)
	stop
	start
	;;
  condrestart)
	if [ -f ${pidfile} ] ; then
		stop
		start
	fi
	;;
  reload)
        reload
	;;
  graceful|help|configtest|fullstatus)
	$apachectl $@
	RETVAL=$?
	;;
  *)
	echo $"Usage: $prog {start|stop|forcestop|restart|condrestart|reload|status|fullstatus|graceful|help|configtest}"
	exit 1
esac

exit $RETVAL
